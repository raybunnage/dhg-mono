#!/bin/bash

# Test suite for testing CLI pipeline
# Generated by Alpha test generator v2

set -e

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../../../.." && pwd)"

# Source test framework
source "$PROJECT_ROOT/scripts/cli-pipeline/testing/test-framework.sh"

# The CLI script to test
CLI_SCRIPT="$SCRIPT_DIR/../testing-cli.sh"

# Initialize test environment
init_test_environment "testing CLI Pipeline"

# Test 1: Script exists and is executable
start_test "Script existence and permissions"
assert_file_exists "$CLI_SCRIPT"
assert_file_executable "$CLI_SCRIPT"

# Test 2: Help command works
start_test "Help command"
assert_command_success "$CLI_SCRIPT" "help"
assert_command_output_contains "$CLI_SCRIPT help" "testing"

# Test 3: Unknown command handling
start_test "Unknown command handling"
assert_command_fails "$CLI_SCRIPT" "unknown-command-xyz"
assert_command_output_contains "$CLI_SCRIPT unknown-command-xyz 2>&1 || true" "Unknown command"

# Test 4: Basic command availability
start_test "Basic commands availability"
assert_command_exists "$CLI_SCRIPT" "test-existence"
assert_command_exists "$CLI_SCRIPT" "test-priority"
assert_command_exists "$CLI_SCRIPT" "test-pipeline"
assert_command_exists "$CLI_SCRIPT" "test-all"
assert_command_exists "$CLI_SCRIPT" "coverage"
assert_command_exists "$CLI_SCRIPT" "report"
assert_command_exists "$CLI_SCRIPT" "health-check"

# Test 5: Command routing
start_test "Command routing"
# Test that commands are properly routed (not showing "Unknown command")
test_output=$("$CLI_SCRIPT" help 2>&1 || true)
if echo "$test_output" | grep -q "Unknown command"; then
    fail "Help command not properly routed"
else
    pass "Help command is routed correctly"
fi

# Test 6: Base class integration
start_test "Base class integration"
# Should show pipeline info in help
help_output=$("$CLI_SCRIPT" help 2>&1 || true)
if echo "$help_output" | grep -qi "pipeline\|cli"; then
    pass "Pipeline information present in help"
else
    fail "Pipeline information missing from help"
fi

# Test 7: Error handling
start_test "Error handling"
# Should handle missing arguments gracefully
output=$("$CLI_SCRIPT" 2>&1 || true)
if echo "$output" | grep -qi "help\|usage"; then
    pass "Shows help on empty command"
else
    fail "Does not show help on empty command"
fi

# Cleanup and summarize
cleanup_test_environment

# Exit with appropriate code
if [ $FAIL_COUNT -gt 0 ]; then
    exit 1
fi

exit 0
