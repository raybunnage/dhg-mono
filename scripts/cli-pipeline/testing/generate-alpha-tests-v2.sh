#!/bin/bash

# Generate test scripts for all Alpha pipelines - Version 2
# Simplified and more robust approach

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../../.." && pwd)"

# Generate test for a single pipeline
generate_test() {
    local pipeline_name="$1"
    local pipeline_dir="$2"
    local cli_script="$3"
    local test_commands="$4"
    
    # Determine test directory and file paths
    local test_dir="$pipeline_dir/tests"
    local test_file="$test_dir/test-${cli_script%.sh}.sh"
    
    # Skip if test already exists
    if [[ -f "$test_file" ]]; then
        echo "Test already exists for $pipeline_name, skipping..."
        return 0
    fi
    
    echo "Generating test for $pipeline_name pipeline..."
    
    # Create test directory
    mkdir -p "$test_dir"
    
    # Generate test file
    cat > "$test_file" << 'HEADER'
#!/bin/bash

# Test suite for PIPELINE_NAME CLI pipeline
# Generated by Alpha test generator v2

set -e

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../../../.." && pwd)"

# Source test framework
source "$PROJECT_ROOT/scripts/cli-pipeline/testing/test-framework.sh"

# The CLI script to test
HEADER

    # Add CLI script path
    echo "CLI_SCRIPT=\"\$SCRIPT_DIR/../$cli_script\"" >> "$test_file"
    
    cat >> "$test_file" << 'MIDDLE'

# Initialize test environment
init_test_environment "PIPELINE_NAME CLI Pipeline"

# Test 1: Script exists and is executable
start_test "Script existence and permissions"
assert_file_exists "$CLI_SCRIPT"
assert_file_executable "$CLI_SCRIPT"

# Test 2: Help command works
start_test "Help command"
assert_command_success "$CLI_SCRIPT" "help"
assert_command_output_contains "$CLI_SCRIPT help" "PIPELINE_NAME"

# Test 3: Unknown command handling
start_test "Unknown command handling"
assert_command_fails "$CLI_SCRIPT" "unknown-command-xyz"
assert_command_output_contains "$CLI_SCRIPT unknown-command-xyz 2>&1 || true" "Unknown command"

# Test 4: Basic command availability
start_test "Basic commands availability"
MIDDLE

    # Add command tests
    for cmd in $test_commands; do
        echo "assert_command_exists \"\$CLI_SCRIPT\" \"$cmd\"" >> "$test_file"
    done

    # Add remaining tests
    cat >> "$test_file" << 'FOOTER'

# Test 5: Command routing
start_test "Command routing"
# Test that commands are properly routed (not showing "Unknown command")
test_output=$("$CLI_SCRIPT" help 2>&1 || true)
if echo "$test_output" | grep -q "Unknown command"; then
    fail "Help command not properly routed"
else
    pass "Help command is routed correctly"
fi

# Test 6: Base class integration
start_test "Base class integration"
# Should show pipeline info in help
help_output=$("$CLI_SCRIPT" help 2>&1 || true)
if echo "$help_output" | grep -qi "pipeline\|cli"; then
    pass "Pipeline information present in help"
else
    fail "Pipeline information missing from help"
fi

# Test 7: Error handling
start_test "Error handling"
# Should handle missing arguments gracefully
output=$("$CLI_SCRIPT" 2>&1 || true)
if echo "$output" | grep -qi "help\|usage"; then
    pass "Shows help on empty command"
else
    fail "Does not show help on empty command"
fi

# Cleanup and summarize
cleanup_test_environment

# Exit with appropriate code
if [ $FAIL_COUNT -gt 0 ]; then
    exit 1
fi

exit 0
FOOTER

    # Replace placeholders
    sed -i '' "s/PIPELINE_NAME/$pipeline_name/g" "$test_file"
    
    # Make test executable
    chmod +x "$test_file"
    
    echo "Generated test: $test_file"
}

# Generate all Alpha pipeline tests
echo "=== Generating Alpha Pipeline Tests v2 ==="
echo

# Testing pipeline
generate_test "testing" \
    "$PROJECT_ROOT/scripts/cli-pipeline/testing" \
    "testing-cli.sh" \
    "test-existence test-priority test-pipeline test-all coverage report health-check"

# Utilities pipeline
generate_test "utilities" \
    "$PROJECT_ROOT/scripts/cli-pipeline/utilities" \
    "utilities-cli.sh" \
    "check-env fix-vite-env diagnose-vite kill-vite clear-cache health-check"

# System pipeline
generate_test "system" \
    "$PROJECT_ROOT/scripts/cli-pipeline/system" \
    "system-cli.sh" \
    "status check-env verify-setup health-check list-services"

# Registry pipeline
generate_test "registry" \
    "$PROJECT_ROOT/scripts/cli-pipeline/registry" \
    "registry-cli.sh" \
    "list search add update remove validate sync health-check"

# Tracking pipeline
generate_test "tracking" \
    "$PROJECT_ROOT/scripts/cli-pipeline/tracking" \
    "tracking-cli.sh" \
    "track list stats report clean status health-check"

# Maintenance pipeline (special case - at root)
mkdir -p "$PROJECT_ROOT/scripts/cli-pipeline/maintenance/tests"
cat > "$PROJECT_ROOT/scripts/cli-pipeline/maintenance/tests/test-maintenance-cli.sh" << 'EOF'
#!/bin/bash

# Test suite for maintenance CLI pipeline
# Special case - maintenance-cli.sh is at root level

set -e

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../../../.." && pwd)"

# Source test framework
source "$PROJECT_ROOT/scripts/cli-pipeline/testing/test-framework.sh"

# The CLI script to test (at root of cli-pipeline)
CLI_SCRIPT="$PROJECT_ROOT/scripts/cli-pipeline/maintenance-cli.sh"

# Initialize test environment
init_test_environment "maintenance CLI Pipeline"

# Test 1: Script exists and is executable
start_test "Script existence and permissions"
assert_file_exists "$CLI_SCRIPT"
assert_file_executable "$CLI_SCRIPT"

# Test 2: Help command works
start_test "Help command"
assert_command_success "$CLI_SCRIPT" "help"
assert_command_output_contains "$CLI_SCRIPT help" "maintenance"

# Test 3: Basic commands
start_test "Basic commands availability"
assert_command_exists "$CLI_SCRIPT" "health-check"
assert_command_exists "$CLI_SCRIPT" "clean-temp"
assert_command_exists "$CLI_SCRIPT" "clean-logs"

# Cleanup and summarize
cleanup_test_environment

# Exit with appropriate code
if [ $FAIL_COUNT -gt 0 ]; then
    exit 1
fi

exit 0
EOF
chmod +x "$PROJECT_ROOT/scripts/cli-pipeline/maintenance/tests/test-maintenance-cli.sh"
echo "Generated test: $PROJECT_ROOT/scripts/cli-pipeline/maintenance/tests/test-maintenance-cli.sh"

# Continuous pipeline
generate_test "continuous" \
    "$PROJECT_ROOT/scripts/cli-pipeline/continuous" \
    "continuous-cli.sh" \
    "start stop status list schedule health-check"

# Proxy pipeline
generate_test "proxy" \
    "$PROJECT_ROOT/scripts/cli-pipeline/proxy" \
    "proxy-cli.sh" \
    "start stop status list start-all stop-all health-check"

# Servers pipeline
generate_test "servers" \
    "$PROJECT_ROOT/scripts/cli-pipeline/servers" \
    "servers-cli.sh" \
    "start stop status list-running list-available health-check"

# Monitoring pipeline
generate_test "monitoring" \
    "$PROJECT_ROOT/scripts/cli-pipeline/monitoring" \
    "monitoring-cli.sh" \
    "start stop status check-health report health-check"

# Shared services pipeline
generate_test "shared-services" \
    "$PROJECT_ROOT/scripts/cli-pipeline/shared-services" \
    "shared-services-cli.sh" \
    "list status check validate analyze health-check"

# Service dependencies pipeline
generate_test "service_dependencies" \
    "$PROJECT_ROOT/scripts/cli-pipeline/service_dependencies" \
    "service-dependencies-cli.sh" \
    "analyze visualize check update scan health-check"

# Refactor tracking pipeline
generate_test "refactor_tracking" \
    "$PROJECT_ROOT/scripts/cli-pipeline/refactor_tracking" \
    "refactor-tracking-cli.sh" \
    "track list status report progress health-check"

# Deprecation pipeline
generate_test "deprecation" \
    "$PROJECT_ROOT/scripts/cli-pipeline/deprecation" \
    "deprecation-cli.sh" \
    "scan analyze report mark-deprecated health-check"

# All pipelines pipeline
generate_test "all_pipelines" \
    "$PROJECT_ROOT/scripts/cli-pipeline/all_pipelines" \
    "all-pipelines-cli.sh" \
    "list status health-checks run-all report"

# Database pipeline
generate_test "database" \
    "$PROJECT_ROOT/scripts/cli-pipeline/database" \
    "database-cli.sh" \
    "table-records empty-tables connection-test db-health-check"

# Deployment pipeline
generate_test "deployment" \
    "$PROJECT_ROOT/scripts/cli-pipeline/deployment" \
    "deployment-cli.sh" \
    "validate-all status health-check history"

echo
echo "=== Test Generation Complete ==="
echo "Generated tests for all 17 Alpha pipelines"
echo
echo "To run all tests: ./scripts/cli-pipeline/testing/run-alpha-tests.sh"