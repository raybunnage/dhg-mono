"# Script Analysis and Classification Prompt\n\nYou are an expert script analyzer on a development team tasked with classifying and assessing shell scripts (.sh) and JavaScript scripts (.js) in a monorepo. Your job is to analyze the provided script file and determine its purpose, quality, and relevance, then create a detailed assessment with recommendations.\n\n## Input Context\n\nYou'll be provided with:\n1. The content of a script file to analyze (.sh or .js)\n2. Information about package.json files that may reference the script\n3. A query that extracts the metadata for the file in JSON format\n4. JSON data from a Supabase query containing document_types for classification\n5. Metadata from a Supabase query providing file_size and creation date for the analyzed script\n6. Optional context about the repository structure and other similar scripts\n\n## Primary Classification Task\n\n**IMPORTANT**: Your primary task is to determine the most appropriate document_type_id for the script. You will:\n1. Analyze the script's purpose and functionality\n2. Review the document_types JSON provided via Supabase query\n3. Select the document_type_id that best matches the script's characteristics\n4. Provide clear reasoning for your document_type selection\n5. Include this document_type_id in the \"script_type_id\" field of your output\n\nThis classification is crucial as it will be used to integrate the script into the correct category in the database.\n\n## General Instructions\n\n1. Carefully read the script content.\n2. Determine the primary purpose of the script.\n3. Classify the script by selecting the most appropriate document_type_id from the provided JSON data.\n4. Assess the script's quality, relevancy, and potential value.\n5. Check if the script is referenced in package.json files.\n6. Detect if this script may be a duplicate of another script based on filename and purpose.\n7. Generate appropriate tags that capture the script's key functionality.\n8. Determine a recommended status (ACTIVE, UPDATE_NEEDED, OBSOLETE, DUPLICATE, UNUSED).\n9. Structure your response in the specified JSON format.\n\nYour assessment should consider:\n- How well the script is written (comments, error handling, structure)\n- Whether the script is referenced in package.json files\n- The script's creation/modification date and its recency\n- The script's complexity and completeness\n- Whether the script appears to be a duplicate of another script\n- The script's practical value to developers\n- Which document_type_id best matches the script based on the provided JSON data\n\n## Document Type Classification Details\n\nThe document_types JSON from Supabase will contain entries with fields such as:\n- document_type_id: A unique identifier for each document type\n- name: The name of the document type\n- description: A description of what this document type represents\n- criteria: Potential criteria or characteristics of scripts that fit this type\n\nYou must thoroughly analyze these document types and select the one that best matches the script's purpose, functionality, and characteristics. Your selection should be justified with clear reasoning that references specific aspects of both the script and the chosen document type.\n\n## Metadata Integration\n\nYou will be provided with metadata from a Supabase query that includes:\n- file_size: The size of the script file in bytes\n- created_at: The creation date of the file\n\nUse this information to populate the corresponding fields in your assessment.\n\n## Script ID Association\n\nEach script analysis will be associated with a unique script_id in the database. Your assessment output will be used to update the database record with this script_id.\n\n## Evaluation Criteria\n\n### Script Status Recommendations\n\n- **ACTIVE**: Script is well-written, clearly useful, referenced in package.json, and recently modified.\n- **UPDATE_NEEDED**: Script is useful but has issues (poor error handling, outdated syntax, unclear purpose, etc.).\n- **OBSOLETE**: Script appears to be outdated, uses deprecated approaches, or hasn't been modified in a long time.\n- **DUPLICATE**: Script functionality appears to be a duplicate of another script in the repository.\n- **UNUSED**: Script isn't referenced in any package.json file and doesn't appear to be actively used.\n\n### Script Quality Assessment (1-10 scale)\n\n- **Code Quality (1-10)**: How well-written is the code? Considerations:\n  - Proper error handling\n  - Good comments and documentation\n  - Clean, consistent style\n  - Well-structured with logical flow\n  - Follows best practices for the language\n\n- **Maintainability (1-10)**: How easy is it to maintain? Considerations:\n  - Clear variable/function names\n  - Modular design\n  - Lack of hardcoded values\n  - Well-documented parameters and return values\n  - Appropriate level of abstraction\n\n- **Utility (1-10)**: How useful is the script? Considerations:\n  - Solves a clear problem\n  - Is referenced in package.json\n  - Has a unique purpose\n  - Handles edge cases appropriately\n  - Works in various environments\n\n- **Documentation (1-10)**: How well is the script documented? Considerations:\n  - Has a clear header/description\n  - Documents parameters and usage\n  - Explains complex logic\n  - Includes examples or usage instructions\n  - Describes expected inputs/outputs\n\n### Usage Status\n\n- **DIRECTLY_REFERENCED**: Script is directly referenced in package.json scripts\n- **INDIRECTLY_REFERENCED**: Script is called by another script that is referenced in package.json\n- **NOT_REFERENCED**: Script is not referenced in any package.json file\n\n## Response Format\n\nProvide your assessment in the following JSON format:\n\n```json\n{\n  \"id\": \"{{auto-generated UUID}}\",\n  \"file_path\": \"{{file_path}}\",\n  \"title\": \"{{script title/name}}\",\n  \"summary\": {\n    \"brief\": \"{{concise summary including status recommendation}}\",\n    \"detailed\": {\n      \"purpose\": \"{{script purpose and business value}}\",\n      \"recommendation\": \"{{what action should be taken and why}}\",\n      \"integration\": \"{{how it integrates with other systems like cli-pipeline or pnpm}}\",\n      \"importance\": \"{{critical/high/medium/low importance with justification}}\"\n    }\n  },\n  \"language\": \"{{sh|js|bash|node}}\",\n  \"ai_generated_tags\": [\"{{tag1}}\", \"{{tag2}}\", \"{{tag3}}\", \"{{tag4}}\", \"{{tag5}}\"],\n  \"manual_tags\": null,\n  \"last_modified_at\": \"{{last_modified_date if available}}\",\n  \"last_indexed_at\": \"{{current_datetime}}\",\n  \"file_hash\": \"{{file_hash if available}}\",\n  \"metadata\": {\n    \"size\": {{file_size_in_bytes}},\n    \"has_shebang\": {{true|false}},\n    \"shebang\": \"{{shebang_line}}\",\n    \"is_executable\": {{true|false}}\n  },\n  \"created_at\": \"{{creation_date from metadata or current_datetime}}\",\n  \"updated_at\": \"{{current_datetime}}\",\n  \"is_deleted\": false,\n  \"script_type_id\": \"{{document_type_id selected from provided JSON data}}\",\n  \"document_type_classification\": {\n    \"selected_document_type_id\": \"{{document_type_id selected from provided JSON data}}\",\n    \"document_type_name\": \"{{name of the selected document type}}\",\n    \"classification_confidence\": {{1-10 score}},\n    \"classification_reasoning\": \"{{detailed explanation of why this document_type_id was selected, with references to specific script characteristics and document type criteria}}\"\n  },\n  \"package_json_references\": [\n    {\n      \"file\": \"{{package.json location}}\",\n      \"script_key\": \"{{script key in package.json}}\",\n      \"command\": \"{{full command}}\"\n    }\n  ],\n  \"ai_assessment\": {\n    \"script_type\": \"{{UTILITY|DEPLOYMENT|DATABASE|BUILD|SETUP|OTHER}}\",\n    \"script_quality\": {\n      \"code_quality\": {{1-10 score}},\n      \"maintainability\": {{1-10 score}},\n      \"utility\": {{1-10 score}},\n      \"documentation\": {{1-10 score}}\n    },\n    \"current_relevance\": {\n      \"score\": {{1-10 score}},\n      \"reasoning\": \"{{brief explanation of current relevance score}}\"\n    },\n    \"potential_relevance\": {\n      \"score\": {{1-10 score}},\n      \"reasoning\": \"{{brief explanation of potential future relevance}}\"\n    },\n    \"usage_status\": \"{{DIRECTLY_REFERENCED|INDIRECTLY_REFERENCED|NOT_REFERENCED}}\",\n    \"status_recommendation\": \"{{ACTIVE|UPDATE_NEEDED|OBSOLETE|DUPLICATE|UNUSED}}\",\n    \"possible_duplicates\": [\n      \"{{similar_script_path1}}\",\n      \"{{similar_script_path2}}\"\n    ],\n    \"confidence\": {{1-10 score}},\n    \"reasoning\": \"{{explanation of the overall assessment and recommendations}}\"\n  },\n  \"assessment_quality_score\": {{1-10 overall quality score}},\n  \"assessment_created_at\": \"{{current_datetime}}\",\n  \"assessment_updated_at\": \"{{current_datetime}}\",\n  \"assessment_model\": \"Claude 3.7 Sonnet\",\n  \"assessmen"

## Available Script Types

Please classify the script into one of these types:

| ID | Name | Description |
| --- | --- | --- |
| a1dddf8e-1264-4ec0-a5af-52eafb536ee3 |  | Scripts for deploying applications to various environments, managing environment configurations, and provisioning resources. |
| 83706b48-b7e6-483b-a1c2-f31c4f1fbba6 |  | Scripts for building applications, compiling code, bundling assets, and automating development workflows. |
| 9636ee5d-d29e-4c09-982e-ac312994bac8 |  | Scripts that generate code, type definitions, configuration files, or other source code artifacts. |
| f7e83857-8bb8-4b18-9d8f-16d5cb783650 |  | Scripts for setting up development environments, installing dependencies, configuring permissions, and preparing workspaces. |
| 53f42e7d-78bd-4bde-8106-dc12a4835695 |  | Scripts for generating, analyzing, or transforming documentation files such as markdown documents, reports, and documentation databases. |
| 682afaf1-1f16-4afe-a706-dc8e5ac2cf90 |  | Scripts that interact with external APIs, web services, or third-party systems to exchange data or trigger actions. Examples include API clients, webhook handlers, and integration testers. |
| 95390c42-2048-41f7-ba30-59d48d3f1075 |  | Scripts that manage AI-related workflows, such as model serving, prompt processing, or AI service integration. |
| 4fdbd8be-fe5a-4341-934d-2b6bd43be7be |  | Scripts designed to run in continuous integration and deployment pipelines, including testing, validation, and release automation. |
| 561a86b0-7064-4c20-a40e-2ec6905c4a42 |  | Scripts for database operations including migrations, schema management, backups, and query execution. |


## Script to Analyze

File Path: scripts/whisper/setup.sh

```
#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check if we're in the right directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
if [[ "$(basename "$(dirname "$SCRIPT_DIR")")" != "scripts" ]] || [[ "$(basename "$SCRIPT_DIR")" != "whisper" ]]; then
    echo -e "${RED}❌ Error: Must run this script from the scripts/whisper directory${NC}"
    echo -e "Current directory: $(pwd)"
    echo -e "Please run: cd /path/to/dhg-mono/scripts/whisper"
    exit 1
fi

# Check for Python 3.11
if ! command -v /opt/homebrew/bin/python3.11 &> /dev/null; then
    echo -e "${RED}❌ Python 3.11 not found${NC}"
    echo -e "Installing Python 3.11..."
    brew install python@3.11
fi

# Verify Python 3.11 version
PYTHON_VERSION=$(/opt/homebrew/bin/python3.11 --version)
echo -e "${GREEN}✅ Using $PYTHON_VERSION${NC}"

# Remove old virtual environment if it exists
if [ -d ".venv-whisper" ]; then
    echo -e "${YELLOW}🗑️  Removing old virtual environment...${NC}"
    rm -rf .venv-whisper
fi

# Create new virtual environment
echo -e "${GREEN}🔧 Creating new virtual environment...${NC}"
/opt/homebrew/bin/python3.11 -m venv .venv-whisper

# Activate virtual environment
echo -e "${GREEN}🔌 Activating virtual environment...${NC}"
source .venv-whisper/bin/activate

# Verify we're using Python 3.11 in the venv
VENV_PYTHON_VERSION=$(python --version)
if [[ $VENV_PYTHON_VERSION != *"3.11"* ]]; then
    echo -e "${RED}❌ Wrong Python version in virtual environment: $VENV_PYTHON_VERSION${NC}"
    echo "Expected Python 3.11.x"
    exit 1
fi

# Install uv
echo -e "${GREEN}📦 Installing uv...${NC}"
curl -LsSf https://astral.sh/uv/install.sh | sh

# Install dependencies
echo -e "${GREEN}📚 Installing Python packages...${NC}"
uv pip install faster-whisper tqdm python-dotenv supabase

# Create .env file if it doesn't exist
if [ ! -f ".env" ]; then
    echo -e "${YELLOW}📝 Creating .env file...${NC}"
    echo "SUPABASE_URL=your_supabase_url
SUPABASE_KEY=your_supabase_key" > .env
    echo -e "${YELLOW}⚠️  Please edit .env with your Supabase credentials${NC}"
fi

# Add to .gitignore if needed
if ! grep -q ".venv-whisper" ../../.gitignore 2>/dev/null; then
    echo -e "${GREEN}📝 Adding .venv-whisper to .gitignore...${NC}"
    echo "
# Python virtual environment
scripts/whisper/.venv-whisper/" >> ../../.gitignore
fi

echo -e "
${GREEN}✅ Setup complete!${NC}

To use the whisper environment:
1. ${YELLOW}cd scripts/whisper${NC}
2. ${YELLOW}source .venv-whisper/bin/activate${NC}
3. ${YELLOW}python batch_process.py /path/to/audio/files --model medium${NC}

To deactivate when done:
${YELLOW}deactivate${NC}
" 
```
