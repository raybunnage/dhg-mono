{
  "rules": [
    {
      "type": "React",
      "instructions": "Use functional components with hooks. Implement responsive design using Tailwind CSS.",
      "componentStructure": {
        "namingConventions": {
          "componentNames": "PascalCase",
          "directoryNames": "lowercase-with-dashes"
        },
        "bestPractices": {
          "componentDeclaration": "function",
          "hooksUsage": ["useState", "useEffect", "useContext"],
          "preferFunctionalComponents": true
        },
        "styling": {
          "approach": {
            "primary": "Tailwind CSS",
            "conventions": [
              "Keep styles close to components",
              "Use utility classes first"
            ]
          }
        }
      }
    },
    {
      "type": "Vite",
      "instructions": "Leverage Vite's fast bundling and hot module replacement."
    },
    {
      "type": "PackageManagement",
      "packageManager": "pnpm",
      "commandLocation": {
        "root": {
          "description": "Commands that must be run from repository root",
          "commands": [
            "pnpm install",
            "pnpm build",
            "turbo run build",
            "pnpm add -w"
          ]
        },
        "app": {
          "description": "Commands that should be run from app directory",
          "commands": [
            "vite",
            "local development server"
          ]
        }
      },
      "rules": [
        {
          "name": "package-installation",
          "description": "Rules for installing packages in monorepo",
          "pattern": {
            "command": "pnpm add",
            "requireFilter": true,
            "filterFormat": "--filter {app-name}"
          },
          "examples": [
            {
              "correct": "pnpm add -D package-name --filter app-name",
              "incorrect": "pnpm add -D package-name",
              "explanation": "Must specify app with --filter flag in monorepo"
            }
          ]
        }
      ]
    },
    {
      "type": "GitIgnore",
      "description": "Monorepo-specific gitignore patterns",
      "structure": {
        "root": {
          "path": "/.gitignore",
          "patterns": [
            "node_modules/",
            "dist/",
            ".env*",
            ".turbo/",
            "*.log"
          ]
        },
        "apps": {
          "path": "apps/*/.gitignore",
          "patterns": [
            "dist/",
            ".env*.local"
          ]
        }
      }
    },
    {
      "type": "StyleGuide",
      "description": "Consistent styling patterns across components",
      "patterns": {
        "buttons": {
          "primary": {
            "base": "bg-blue-600 text-white rounded-md px-4 py-2",
            "hover": "hover:bg-blue-700"
          }
        },
        "layout": {
          "container": "max-w-7xl mx-auto px-4",
          "section": "py-12"
        }
      }
    },
    {
      "type": "Netlify",
      "description": "Netlify deployment configuration for monorepo",
      "structure": {
        "root": {
          "path": "/netlify.toml",
          "required": true
        },
        "apps": {
          "path": "apps/*/netlify.toml",
          "required": true,
          "configuration": {
            "base": "apps/{app-name}",
            "publish": "dist"
          }
        }
      }
    },
    {
      "type": "MonorepoStructure",
      "description": "Standard structure for dhg monorepo",
      "apps": {
        "location": "apps/",
        "naming": "dhg-{name}",
        "requiredFiles": [
          "package.json",
          "vite.config.js",
          "netlify.toml",
          "src/App.jsx",
          "src/main.jsx",
          "index.html"
        ]
      }
    },
    {
      "type": "NetlifyCommands",
      "description": "Netlify CLI commands and their proper locations",
      "commandLocation": {
        "root": {
          "description": "Commands to run from repository root",
          "commands": [
            "pnpm add -Dw netlify-cli",
            "netlify login",
            "netlify link"
          ]
        },
        "app": {
          "description": "Commands to run from individual app directories (apps/dhg-a or apps/dhg-b)",
          "commands": [
            "netlify init",
            "netlify deploy",
            "netlify deploy --prod"
          ],
          "note": "Must cd into app directory first: cd apps/dhg-a"
        }
      },
      "setupSteps": [
        {
          "step": 1,
          "location": "root",
          "command": "pnpm add -Dw netlify-cli",
          "description": "Install Netlify CLI as a dev dependency in root"
        },
        {
          "step": 2,
          "location": "root",
          "command": "netlify login",
          "description": "Login to your Netlify account"
        },
        {
          "step": 3,
          "location": "app",
          "command": "cd apps/dhg-a",
          "description": "Navigate to first app directory"
        },
        {
          "step": 4,
          "location": "app",
          "command": "netlify init",
          "description": "Initialize Netlify for the app"
        },
        {
          "step": 5,
          "location": "app",
          "command": "cd ../dhg-b",
          "description": "Navigate to second app directory"
        },
        {
          "step": 6,
          "location": "app",
          "command": "netlify init",
          "description": "Initialize Netlify for the second app"
        }
      ]
    },
    {
      "type": "FileTypes",
      "description": "Reference files and templates directory",
      "structure": {
        "root": {
          "path": "/file_types",
          "purpose": "Store reference files and templates that should not be in source control",
          "patterns": [
            "*.json - JSON schema examples",
            "*.jsx - React component templates",
            "*.md - Documentation templates",
            "*.config.* - Configuration templates"
          ]
        }
      },
      "usage": {
        "location": "root directory only",
        "gitStatus": "completely ignored",
        "purpose": [
          "Store reference files",
          "Keep template examples",
          "Test file patterns",
          "Temporary development files"
        ]
      }
    },
    {
      "type": "Documentation",
      "instructions": "Maintain clear documentation in markdown (.md) files within the docs directory.",
      "structure": {
        "location": "docs/",
        "files": {
          "deployment-guide.md": {
            "purpose": "Main deployment and setup documentation",
            "sections": [
              "Project Overview",
              "Environment Setup",
              "Local Development",
              "Deployment",
              "Project Structure"
            ],
            "beginnerGuidance": {
              "environmentExplanations": {
                "production": "The live website that users see at dhg-hub.org",
                "development": "A separate version for testing new features before they go live",
                "preview": "Temporary versions to check individual features while they're being built"
              },
              "vercelConcepts": {
                "deployment": "The process of making your website live on the internet",
                "buildCommand": "Instructions that tell Vercel how to create the final version of your website",
                "rootDirectory": "The main folder containing your website code",
                "outputDirectory": "Where the final, built version of your website is stored"
              },
              "branchingStrategy": {
                "main": "Your primary code that runs the live website",
                "development": "Where new features are combined and tested",
                "feature": "Individual branches for working on new features"
              }
            },
            "commonTasks": {
              "localDevelopment": "How to run and test the website on your computer",
              "makingChanges": "Steps to create and test new features",
              "deployment": "How to get your changes onto the live website"
            }
          }
        },
        "formatting": {
          "useMarkdown": true,
          "includeCodeBlocks": true,
          "maintainTableOfContents": true,
          "style": {
            "language": "Clear and simple, avoiding technical jargon",
            "examples": "Include practical examples for each concept",
            "screenshots": "Add visual guides for important steps"
          }
        }
      }
    },
    {
      "type": "Scripts",
      "description": "Monorepo script organization and standards",
      "structure": {
        "root": {
          "path": "/scripts",
          "subdirectories": {
            "setup": {
              "description": "Initial setup and configuration scripts",
              "examples": [
                "init-workspace.sh",
                "setup-env.sh",
                "create-app.sh"
              ]
            },
            "build": {
              "description": "Build-related scripts",
              "examples": [
                "build-all.sh",
                "build-affected.sh",
                "clean-builds.sh"
              ]
            },
            "app-management": {
              "description": "Application management scripts",
              "examples": [
                "copy-lovable-app.sh",
                "create-new-app.sh",
                "update-app-config.sh"
              ]
            }
          }
        },
        "conventions": {
          "naming": {
            "pattern": "kebab-case",
            "extension": ".sh or .ts for complex scripts"
          },
          "documentation": {
            "requirements": [
              "Script purpose in header comment",
              "Usage examples",
              "Required environment variables",
              "Dependencies"
            ]
          }
        }
      }
    },
    {
      "type": "SupabaseOperations",
      "scope": "monorepo",
      "description": "Safety rules for Supabase operations across all apps",
      "databaseOperations": {
        "riskLevels": {
          "read": "low",
          "targetedWrite": "medium",
          "globalWrite": "high",
          "schemaChanges": "high",
          "reset": "extreme"
        },
        "requirements": [
          "Always prefer targeted operations over global ones",
          "Explicitly warn about potential data loss",
          "Never suggest resets without clear warnings",
          "Preserve existing working systems",
          "Provide rollback steps for risky operations",
          "Default to most conservative approach"
        ],
        "monorepoConsiderations": [
          "Consider impact across all apps using shared database",
          "Check for cross-app dependencies before modifications",
          "Document changes that affect multiple apps"
        ]
      },
      "migrations": {
        "principles": [
          "Never modify existing remote migrations",
          "Always check both local and remote state before creating new migrations",
          "Keep migrations atomic and focused"
        ],
        "naming": {
          "pattern": "YYYYMMDDHHMMSS_descriptive_name.sql",
          "examples": {
            "correct": "20250211123001_rename_document_types.sql",
            "incorrect": "[timestamp]_rename_document_types.sql"
          },
          "rules": [
            "Always use actual timestamps, never placeholders",
            "Timestamp must be current or future date/time",
            "Must be after latest existing migration timestamp",
            "Each migration needs matching _down.sql file",
            "Timestamps must be unique across all migrations"
          ]
        },
        "stateChecks": {
          "beforeCreating": [
            "Run pnpm db:check to see LOCAL vs REMOTE state",
            "Verify no duplicate timestamps exist locally",
            "Ensure new timestamp is after latest remote migration"
          ],
          "commands": {
            "checkState": "pnpm db:check",
            "pullRemote": "pnpm db:pull",
            "createNew": "pnpm supabase migration new migration_name"
          }
        },
        "troubleshooting": {
          "checkOutput": {
            "description": "When db:check shows mismatched LOCAL vs REMOTE:",
            "steps": [
              "Remove duplicate local migrations (same timestamp)",
              "Get missing remote migrations using db:pull",
              "Ensure new migrations use timestamps after latest remote",
              "Never modify migrations that exist in REMOTE"
            ]
          },
          "commonIssues": {
            "duplicateLocal": "Remove duplicate timestamp files",
            "missingRemote": "Use db:pull to get missing migrations",
            "outOfSequence": "Use timestamp after latest remote migration"
          }
        },
        "template": {
          "location": "supabase/templates/migration.sql",
          "usage": [
            "Copy template content, don't use placeholder timestamp",
            "Generate actual timestamp for filename",
            "Create both up and down migration files"
          ]
        }
      }
    },
    {
      "type": "ProgressiveDevelopment",
      "description": "Rules for safe, incremental development",
      "principles": {
        "preserveExisting": {
          "requirement": "Always preserve existing working functionality",
          "steps": [
            "Document current working features",
            "Test existing functionality before changes",
            "Make incremental changes only",
            "Verify no regression after each change"
          ]
        },
        "changeProcess": {
          "steps": [
            "List current working features",
            "Document proposed changes",
            "Identify potential impacts",
            "Make smallest possible change",
            "Test all existing features",
            "Only commit when everything works"
          ]
        },
        "regressionPrevention": {
          "requirements": [
            "Never remove working code without explicit request",
            "Keep existing event handlers and state",
            "Maintain all current UI elements",
            "Preserve current styling and layout"
          ]
        }
      },
      "warnings": {
        "required": true,
        "checkpoints": [
          "Are all existing buttons still present?",
          "Do all current features still work?",
          "Is existing state management preserved?",
          "Are all event handlers intact?"
        ]
      }
    },
    {
      "type": "SupabaseStructure",
      "description": "Centralized Supabase configuration in root directory",
      "structure": {
        "root": {
          "path": "/supabase",
          "purpose": "Central location for all Supabase-related code and configuration",
          "contents": {
            "migrations": "Database migrations",
            "types": "Shared TypeScript types",
            "client": "Shared Supabase client configuration"
          }
        }
      },
      "requirements": [
        "All Supabase files must be in root /supabase directory",
        "No local Supabase configurations in app directories",
        "Import types and clients from root /supabase",
        "All migrations must be in /supabase/migrations",
        "Use relative imports (../../../../../supabase) to access root Supabase files"
      ],
      "imports": {
        "types": {
          "correct": "import type { Database } from '../../../../../supabase/types'",
          "incorrect": "import type { Database } from './types'"
        },
        "client": {
          "correct": "import { supabase } from '@/integrations/supabase/client'",
          "incorrect": "import { supabase } from './supabase/client'"
        }
      },
      "migrations": {
        "location": "/supabase/migrations only",
        "naming": "YYYYMMDDHHMMSS_descriptive_name.sql",
        "command": "pnpm supabase migration new",
        "runFrom": "root directory only"
      }
    },
    {
      "name": "no-secrets-in-scripts",
      "description": "Prevent secrets from being added to script files",
      "pattern": {
        "forbidden": [
          {
            "match": "postgresql://postgres:[^${}][^@]*@",
            "message": "Do not hardcode database passwords. Use environment variables like ${SUPABASE_DB_PASSWORD}"
          },
          {
            "match": "password=|secret=|token=|key=",
            "message": "Do not hardcode secrets. Use environment variables"
          }
        ],
        "required": [
          {
            "match": "\\${[A-Z_]+}",
            "in": "DB_URL=|password=|token=|key=",
            "message": "Secrets must use environment variables"
          }
        ]
      },
      "files": ["**/*.sh", "**/*.bash", "**/*.zsh"]
    }
  ]
} 