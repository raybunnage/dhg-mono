import React, { useState } from 'react';
import { dhgAudioLightAuth, type UserRegistrationData } from '../services/light-auth-service';
// import { ProfileForm } from './ProfileForm';
// import type { ProfileFormData } from '@shared/services/user-profile-service';

// Temporary simplified type to get authentication working
type ProfileFormData = {
  profession: string;
  learning_goals: string[];
  interested_topics: string[];
};

interface LightEmailAuthProps {
  onSuccess: () => void;
  redirectTo?: string;
}

type AuthStep = 'email' | 'profile' | 'loading';

export const LightEmailAuth: React.FC<LightEmailAuthProps> = ({ 
  onSuccess,
  redirectTo = '/'
}) => {
  const [step, setStep] = useState<AuthStep>('email');
  const [email, setEmail] = useState('');
  const [name, setName] = useState('');
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const handleEmailSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);

    try {
      const result = await dhgAudioLightAuth.login(email);
      
      if (result.success && !result.needsProfile) {
        // User exists and has profile - login successful
        onSuccess();
      } else if (result.needsProfile) {
        // Need to collect profile information
        setStep('profile');
      } else {
        setError(result.error || 'Login failed');
      }
    } catch (err) {
      setError('An unexpected error occurred');
    } finally {
      setIsLoading(false);
    }
  };

  const handleProfileSubmit = async (profile: ProfileFormData) => {
    setError('');
    setIsLoading(true);

    try {
      // Check if this is a new registration or profile update
      const currentUser = dhgAudioLightAuth.getCurrentUser();
      
      if (currentUser) {
        // Existing user completing profile
        const success = await dhgAudioLightAuth.updateProfile(currentUser.id, profile);
        if (success) {
          onSuccess();
        } else {
          setError('Failed to save profile');
        }
      } else {
        // New user registration
        const registrationData: UserRegistrationData = {
          email,
          name,
          profile
        };
        
        const result = await dhgAudioLightAuth.registerWithProfile(registrationData);
        
        if (result.success) {
          onSuccess();
        } else {
          setError(result.error || 'Registration failed');
        }
      }
    } catch (err) {
      setError('An unexpected error occurred');
    } finally {
      setIsLoading(false);
    }
  };

  if (step === 'profile') {
    return (
      <div className="min-h-screen bg-gray-50 py-12">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-8">
            <h2 className="text-3xl font-extrabold text-gray-900">
              Complete Your Profile
            </h2>
            <p className="mt-2 text-lg text-gray-600">
              Help us personalize your learning experience by telling us about yourself
            </p>
          </div>

          {error && (
            <div className="max-w-md mx-auto mb-4">
              <div className="rounded-md bg-red-50 p-4">
                <p className="text-sm text-red-800">{error}</p>
              </div>
            </div>
          )}

          <ProfileForm
            onSubmit={handleProfileSubmit}
            isLoading={isLoading}
          />
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
      <div className="sm:mx-auto sm:w-full sm:max-w-md">
        <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
          Welcome to DHG Audio
        </h2>
        <p className="mt-2 text-center text-sm text-gray-600">
          Enter your email to continue
        </p>
      </div>

      <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
        <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
          <form onSubmit={handleEmailSubmit} className="space-y-6">
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email address
              </label>
              <div className="mt-1">
                <input
                  id="email"
                  name="email"
                  type="email"
                  autoComplete="email"
                  required
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  placeholder="you@example.com"
                />
              </div>
            </div>

            {/* Only show name field if email is not recognized */}
            {error && error.includes('complete your profile') && (
              <div>
                <label htmlFor="name" className="block text-sm font-medium text-gray-700">
                  Your name
                </label>
                <div className="mt-1">
                  <input
                    id="name"
                    name="name"
                    type="text"
                    autoComplete="name"
                    required
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                    className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    placeholder="John Doe"
                  />
                </div>
              </div>
            )}

            {error && !error.includes('complete your profile') && (
              <div className="rounded-md bg-red-50 p-4">
                <div className="flex">
                  <div className="ml-3">
                    <h3 className="text-sm font-medium text-red-800">
                      {error}
                    </h3>
                  </div>
                </div>
              </div>
            )}

            <div>
              <button
                type="submit"
                disabled={isLoading || (error?.includes('complete your profile') && !name)}
                className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isLoading ? 'Loading...' : 'Continue'}
              </button>
            </div>
          </form>

          <div className="mt-6">
            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-gray-300" />
              </div>
              <div className="relative flex justify-center text-sm">
                <span className="px-2 bg-white text-gray-500">
                  No password required
                </span>
              </div>
            </div>

            <div className="mt-6 text-center text-sm text-gray-600">
              <p>
                This app uses simplified authentication. 
                {' '}New users will be asked to complete a profile.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};